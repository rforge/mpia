d$identityThreshold = 0.3#
comps = competences(ppl)#
terms(comps)
5
isolates=5
print(paste(length(isolates), " stray components reattached.", sep=""))
plot(comps, col="black", dot.cex=3, label=F, component.arrows=F, component.labels=F, connect=F)
ppl = HumanResourceManager(domainmanager=dmgr, domain=d)#
d$traces = matrix(ncol=0, nrow=0)#
gc()#
#
plot(d, method="topographic")#
#
set.seed(22031977)#
firstnames = c(#
readLines(dir("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/names/", full.names=TRUE)[1], warn=F),#
readLines(dir("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/names/", full.names=TRUE)[2], warn=F)#
)#
student.names = firstnames[sample(length(firstnames),nrow(essays.content))]#
#
oldds = ""#
essays = NULL#
essays.scores = NULL#
for (i in 1:102) {#
    if (i!=41) {#
        ds = strsplit(substr(essays.content[i,1], 5, nchar(essays.content[i,1])), "[_\\.]")[[1]][1]#
        if (ds != oldds) { n = 1;oldds=ds} else n = n+1#
        essays.scores[i] = humanscores[essays.content[i,1],1]#
        student.names[i] = paste( student.names[i], " (", ds,")", sep="" )#
        p = ppl$add( name=student.names[i] )#
        essays[i] = gsub("[^a-zA-Z0-9äöüÄÖÜß]", " ", essays.content[i,2])#
        p$perform( essays[i], activity="exam", purpose="exam", score=essays.scores[i])#
        plot(p, col= cs[as.integer(ds)], label=FALSE, component.labels=FALSE, component.arrows=F, dot.cex=1) # gray(1-(essays.scores[i]/5)/8)#
        print(i)#
    } # empty ones removed#
}#
#
# competence analysis for this cluster#
#
d$identityThreshold = 1#
comps = competences(ppl)#
terms(comps)#
#
plot(comps, col="green", dot.cex=3, label=F, component.arrows=F, component.labels=F, connect=F)
q()
library(mpia)
essays.content = read.csv2(file="~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/essays.content.csv", stringsAsFactors=FALSE)
dmgr = DomainManager()#
dmgr$tempdir = "~/Documents/werkstatt/mpia-package/cache/"#
d = dmgr$get(name="essays")
plot(d, method="topographic")
ppl = HumanResourceManager(domainmanager=dmgr, domain=d)#
d$traces = matrix(ncol=0, nrow=0)#
gc()
set.seed(22031977)#
firstnames = c(#
readLines(dir("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/names/", full.names=TRUE)[1], warn=F),#
readLines(dir("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/names/", full.names=TRUE)[2], warn=F)#
)#
student.names = firstnames[sample(length(firstnames),nrow(essays.content))]
scorefiles = dir("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/essays.scores/", full.names=TRUE)#
humanscores=NULL#
for (i in 1:length(scorefiles)) {#
	humanscores = rbind(humanscores, read.table(scorefiles[i], col.names=c("file","score"),row.names="file"))#
}
oldds = ""#
essays = NULL#
essays.scores = NULL#
for (i in 1:102) {#
    if (i!=41) {#
        ds = strsplit(substr(essays.content[i,1], 5, nchar(essays.content[i,1])), "[_\\.]")[[1]][1]#
        if (ds != oldds) { n = 1;oldds=ds} else n = n+1#
        essays.scores[i] = humanscores[essays.content[i,1],1]#
        student.names[i] = paste( student.names[i], " (", ds,")", sep="" )#
        p = ppl$add( name=student.names[i] )#
        essays[i] = gsub("[^a-zA-Z0-9äöüÄÖÜß]", " ", essays.content[i,2])#
        p$perform( essays[i], activity="exam", purpose="exam", score=essays.scores[i])#
        plot(p, col= cs[as.integer(ds)], label=FALSE, component.labels=FALSE, component.arrows=F, dot.cex=1) # gray(1-(essays.scores[i]/5)/8)#
        print(i)#
    } # empty ones removed#
}
cs = c("firebrick", "chartreuse4", "darkorchid4", "black", "deeppink3", "orange4", "cadetblue4", "goldenrod2", "deepskyblue2", "antiquewhite3")
oldds = ""#
essays = NULL#
essays.scores = NULL#
for (i in 1:102) {#
    if (i!=41) {#
        ds = strsplit(substr(essays.content[i,1], 5, nchar(essays.content[i,1])), "[_\\.]")[[1]][1]#
        if (ds != oldds) { n = 1;oldds=ds} else n = n+1#
        essays.scores[i] = humanscores[essays.content[i,1],1]#
        student.names[i] = paste( student.names[i], " (", ds,")", sep="" )#
        p = ppl$add( name=student.names[i] )#
        essays[i] = gsub("[^a-zA-Z0-9äöüÄÖÜß]", " ", essays.content[i,2])#
        p$perform( essays[i], activity="exam", purpose="exam", score=essays.scores[i])#
        plot(p, col= cs[as.integer(ds)], label=FALSE, component.labels=FALSE, component.arrows=F, dot.cex=1) # gray(1-(essays.scores[i]/5)/8)#
        print(i)#
    } # empty ones removed#
}
d$identityThreshold = 1#
comps = competences(ppl)#
terms(comps)#
#
plot(comps, col="red", dot.cex=3, label=F, component.arrows=F, component.labels=F, connect=F)
ds
ppl[[1:102]]
ppl[[1:101]]
ppl$people[[1:101]]
ppl$people[[1:102]]
ppl$people[1:102]
competences(ppl$people[1:102])
unlist( ppl$people[1:102] )
unlist( ppl$people[[1:102]] )
unlist( ppl$people[1:102] )
unlist(unlist( ppl$people[1:102] ))
ppl$people[1:102]
performances(ppl$people[1:102])
performances(ppl$people[[1:102]])
performances(ppl$people[1:102])
coll1 = ppl$people[1:102]#
class(coll1) = "Person"
coll1
pf1 = performances(coll1)
pf1
coll1 = ppl$people[[1:102]]#
class(coll1) = "Person"
coll1 = lapply(ppl$people[1:102], performances)
coll1
coll1 = lapply(ppl$people[1:102], performances)#
class(coll1) = "Performance"
coll1
coll1 = lapply(ppl$people[1:102], performances)
coll1
competences(coll1)
class(coll1) = c("Performance", class(coll1))
coll1 = lapply(ppl$people[1:102], performances)#
class(coll1) = c("Performance", class(coll1))
competences(coll1)
coll1 = lapply(ppl$people[1:102], performances)#
class(coll1) = c("Performance", "list")
competences(coll1)
coll1 = as.list(lapply(ppl$people[1:102], performances))
coll1
class(coll1)
class(coll1) = c("Performance", class(coll1))
terms(comps)
competences(coll1)
ppl
coll1 = as.list(lapply(ppl$people[1:102], performances))#
class(coll1) = c("Performance")
competences(coll1)
coll1 = lapply(ppl$people[1:102], performances)
class(coll1)
class(coll1) = c("Performance")
class(coll1)
is.list(coll1)
competences(coll1)
coll1 = lapply(ppl$people[1:102], function(e) performances(e[[1]]))
coll1 = lapply(ppl$people[1:102], function(e) e[1])
coll1
class(coll1) = c("Performance")#
competences(coll1)
terms(coll1)
comps = competences(coll1)#
terms(comps)
pdf(width=(21-8.8)/2.54, height=(29.7-10.4-1)/2.54, file="~/Documents/denkfabrik/dissertation/workodrome-II/examples-essayscoring/map-final-competence-coll1.pdf")#
#
ppl = HumanResourceManager(domainmanager=dmgr, domain=d)#
d$traces = matrix(ncol=0, nrow=0)#
gc()#
#
plot(d, method="topographic")#
#
set.seed(22031977)#
firstnames = c(#
readLines(dir("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/names/", full.names=TRUE)[1], warn=F),#
readLines(dir("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/names/", full.names=TRUE)[2], warn=F)#
)#
student.names = firstnames[sample(length(firstnames),nrow(essays.content))]#
#
oldds = ""#
essays = NULL#
essays.scores = NULL#
for (i in 1:102) {#
    if (i!=41) {#
        ds = strsplit(substr(essays.content[i,1], 5, nchar(essays.content[i,1])), "[_\\.]")[[1]][1]#
        if (ds != oldds) { n = 1;oldds=ds} else n = n+1#
        essays.scores[i] = humanscores[essays.content[i,1],1]#
        student.names[i] = paste( student.names[i], " (", ds,")", sep="" )#
        p = ppl$add( name=student.names[i] )#
        essays[i] = gsub("[^a-zA-Z0-9äöüÄÖÜß]", " ", essays.content[i,2])#
        p$perform( essays[i], activity="exam", purpose="exam", score=essays.scores[i])#
        plot(p, col= cs[as.integer(ds)], label=FALSE, component.labels=FALSE, component.arrows=F, dot.cex=1) # gray(1-(essays.scores[i]/5)/8)#
        print(i)#
    } # empty ones removed#
}#
#
# competence analysis for this cluster#
#
d$identityThreshold = 1#
comps = competences(ppl)#
terms(comps)#
#coll1 = lapply(ppl$people[1:102], function(e) e[1])#
#class(coll1) = c("Performance")#
#comps = competences(coll1)#
#terms(comps)#
#
plot(comps, col=cs[1], dot.cex=3, label=F, component.arrows=F, component.labels=F, connect=F)#
#
dev.off()
pdf(width=(21-8.8)/2.54, height=(29.7-10.4-1)/2.54, file="~/Documents/denkfabrik/dissertation/workodrome-II/examples-essayscoring/map-final-competence-coll1.pdf")#
#
ppl = HumanResourceManager(domainmanager=dmgr, domain=d)#
d$traces = matrix(ncol=0, nrow=0)#
gc()#
#
plot(d, method="topographic")#
#
set.seed(22031977)#
firstnames = c(#
readLines(dir("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/names/", full.names=TRUE)[1], warn=F),#
readLines(dir("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/work/names/", full.names=TRUE)[2], warn=F)#
)#
student.names = firstnames[sample(length(firstnames),nrow(essays.content))]#
#
oldds = ""#
essays = NULL#
essays.scores = NULL#
for (i in 1:102) {#
    if (i!=41) {#
        ds = strsplit(substr(essays.content[i,1], 5, nchar(essays.content[i,1])), "[_\\.]")[[1]][1]#
        if (ds != oldds) { n = 1;oldds=ds} else n = n+1#
        essays.scores[i] = humanscores[essays.content[i,1],1]#
        student.names[i] = paste( student.names[i], " (", ds,")", sep="" )#
        p = ppl$add( name=student.names[i] )#
        essays[i] = gsub("[^a-zA-Z0-9äöüÄÖÜß]", " ", essays.content[i,2])#
        p$perform( essays[i], activity="exam", purpose="exam", score=essays.scores[i])#
        plot(p, col= cs[as.integer(ds)], label=FALSE, component.labels=FALSE, component.arrows=F, dot.cex=1) # gray(1-(essays.scores[i]/5)/8)#
        print(i)#
    } # empty ones removed#
}#
#
# competence analysis for this cluster#
#
d$identityThreshold = 1#
comps = competences(ppl)#
terms(comps)#
#coll1 = lapply(ppl$people[1:102], function(e) e[1])#
#class(coll1) = c("Performance")#
#comps = competences(coll1)#
#terms(comps)#
#
plot(comps, col="green", dot.cex=3, label=F, component.arrows=F, component.labels=F, connect=F)#
#
dev.off()
groups(ppl)
d$identityThreshold
d$identityThreshold = 0.7
groups(ppl)
ppl$groups
ppl$groups[1]
performances(ppl$groups[1])
performances(ppl$groups[[1]])
overlap(performances(ppl$groups[[1]]))
terms(performances(ppl$groups[[1]]))
terms(performances(ppl$groups[[2]]))
terms(performances(ppl$groups[[3]]))
terms(performances(ppl$groups[[4]]))
ppl$groups
ppl
ppl$people
Uriel (1), Xenos (1), Emili (1), Montague (1), Aimil (1), Gerick (1), Charmain (1), Kanya (1), Emma (1), Kitty (1), Tobin (1)
ppl$groups[1]
ppl$groups[1]$getName()
ppl$groups[1]$name
ppl$groups[[1]]$name
?strsplit
strsplit(ppl$groups[[1]]$name, ", ")
group1 = unlist(strsplit(ppl$groups[[1]]$name, ", "))
group1
names(ppl)
which(names(ppl) %in% group1)
g = 1
gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)
gmemb
gstuds
lapply(ppl$people[[gstuds]], function(e) e$scores)
lapply(ppl$people[gstuds], function(e) e$scores)
unlist( lapply(ppl$people[gstuds], function(e) e$scores) )
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print("group", g, sep=" ")#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=",")#
#
}
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print("group", g, ":", sep=" ")#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
#
}
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print(paste("group", g, ":", sep=" "))#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
#
}
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print(paste("group", g, ":", sep=" "))#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
   print( paste( lapply(ppl$people[gstuds], function(e) terms(e[1])) ))#
#
}
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print(paste("group", g, ":", sep=" "))#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
   print( paste( lapply(ppl$people[gstuds], function(e) terms(e[1])), collapse="," ))#
#
}
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print(paste("group", g, ":", sep=" "))#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
   print( paste( lapply(ppl$people[gstuds], function(e) paste(terms(e[1]), collapse=",") ))#
#
}
print( paste( lapply(ppl$people[gstuds], function(e) paste(terms(e[1]), collapse=",") ))
)
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print(paste("group", g, ":", sep=" "))#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
   print( paste( lapply(ppl$people[gstuds], function(e) paste(terms(e[1]), collapse=",") )))#
#
}
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print(paste("group", g, ":", sep=" "))#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
   #print( paste( lapply(ppl$people[gstuds], function(e) paste(terms(e[1]), collapse=",") )))#
   print( terms(ppl$groups[[g]]) )#
#
}
ppl$groups[[g]]
g
terms(ppl$groups[[g]])
overlap(terms(ppl$groups[[g]]))
overlap(ppl$groups[[g]])
terms(position(ppl$groups[[g]]))
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print(paste("group", g, ":", sep=" "))#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
   #print( paste( lapply(ppl$people[gstuds], function(e) paste(terms(e[1]), collapse=",") )))#
   print( terms(position(ppl$groups[[g]])) )#
#
}
d$identityThreshold = 1#
groups(ppl)#
#
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print(paste("group", g, ":", sep=" "))#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
   #print( paste( lapply(ppl$people[gstuds], function(e) paste(terms(e[1]), collapse=",") )))#
   print( terms(position(ppl$groups[[g]])) )#
#
}
d$identityThreshold = 0.7#
groups(ppl)#
#
for (g in 1:length(ppl$groups)){#
#
   gmemb = unlist(strsplit(ppl$groups[[g]]$name, ", "))#
   gstuds = which(names(ppl) %in% gmemb)#
   print(paste("group", g, ":", sep=" "))#
   print( paste( unlist( lapply(ppl$people[gstuds], function(e) e$scores) ), collapse=","))#
   #print( paste( lapply(ppl$people[gstuds], function(e) paste(terms(e[1]), collapse=",") )))#
   print( terms(position(ppl$groups[[g]])) )#
#
}
scores =    unlist( lapply(ppl$people[gstuds], function(e) e$scores) )
scores
scores =    unlist( lapply(ppl$people, function(e) e$scores) )
scores
scores =    unlist( lapply(ppl$people, function(e) e$scores) )#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    print( overlap(position(ppl$people[[gstuds]])) )#
}
gstuds
overlap(position(ppl$people[[gstuds]]))
overlap(terms(position(ppl$people[[gstuds]])))
overlap(terms(ppl$people[[gstuds]])
)
overlap(ppl$people[[gstuds]])
terms(ppl$people[[gstuds]])
terms(ppl$people[gstuds])
lapply(ppl$people[[gstuds], terms)
lapply(ppl$people[[gstuds], terms))
lapply(ppl$people[[gstuds]], terms))
lapply(ppl$people[[gstuds]], terms)
lapply(ppl$people[gstuds], terms)
unlist(lapply(ppl$people[gstuds], terms))
overlap(lapply(ppl$people[gstuds], terms))
overlap(unlist(lapply(ppl$people[gstuds], terms)))
overlap(unlist(lapply(ppl$people[[gstuds]], terms)))
unlist(lapply(ppl$people[[gstuds]], terms))
unlist(lapply(ppl$people[gstuds], terms))
overlap(lapply(ppl$people[gstuds], terms))
lapply(ppl$people[gstuds], terms)
unlist(lapply(ppl$people[gstuds], terms))
unlist(lapply(ppl$people[gstuds], terms))i
i
overlap
print( overlap(lapply(ppl$people[[gstuds]], performances) )
)
overlap(lapply(ppl$people[[gstuds]], performances) )
lapply(ppl$people[[gstuds]], performances)
lapply(ppl$people[gstuds], performances)
overlap(lapply(ppl$people[gstuds], performances))
overlap(unlist(lapply(ppl$people[gstuds], performances)))
lapply(ppl$people[gstuds], performances)
pfs = lapply(ppl$people[gstuds], performances)#
    class(pfs) = "Performance"#
    print( overlap(pfs) )
pfs
pfs = lapply(ppl$people[[gstuds]], performances)
pfs = lapply(ppl$people[gstuds], performances)
pfs
overlap(pfs)
class(pfs) = "Performance"
overlap(pfs)
pfs    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"
pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"
pfs
print( overlap(pfs) )
overlap(pfs)
lapply(pfs, terms)
pfs2 = position(pfs)
pfs2
terms(pfs2)
scores =    unlist( lapply(ppl$people, function(e) e$scores) )#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"#
    pfs2 = position(pfs)#
    print( terms(pfs2) )#
}
scores =    unlist( lapply(ppl$people, function(e) e$scores) )#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"#
    pfs2 = position(pfs)#
    print( paste( terms(pfs2), collapse=", " )#
}
scores =    unlist( lapply(ppl$people, function(e) e$scores) )#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"#
    pfs2 = position(pfs)#
    print( paste( terms(pfs2), collapse=", " ))#
}
scterms = matrix(ncol=2,nrow=length(unique(scores)))
scterms
colnames(scterms) = c("scoregroup", "terms")
scterms
scores =  unlist( lapply(ppl$people, function(e) e$scores) )#
scterms = matrix(ncol=2,nrow=length(unique(scores)))#
colnames(scterms) = c("scoregroup", "terms")#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    scterms[i,1] = i#
    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"#
    pfs2 = position(pfs)#
    print( paste( terms(pfs2), collapse=", " ))#
    scterms[i,2] =paste( terms(pfs2), collapse=", " )#
}
scores =  unlist( lapply(ppl$people, function(e) e$scores) )#
scterms = matrix(ncol=2,nrow=max(unique(scores)))#
colnames(scterms) = c("scoregroup", "terms")#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    scterms[i,1] = i#
    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"#
    pfs2 = position(pfs)#
    print( paste( terms(pfs2), collapse=", " ))#
    scterms[i,2] =paste( terms(pfs2), collapse=", " )#
}
scterms
max(scores)
scores =  unlist( lapply(ppl$people, function(e) e$scores) )#
scterms = matrix(ncol=2,nrow=length(unique(scores)))#
colnames(scterms) = c("scoregroup", "terms")#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    scterms[i/5,1] = i#
    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"#
    pfs2 = position(pfs)#
    print( paste( terms(pfs2), collapse=", " ))#
    scterms[i/5,2] =paste( terms(pfs2), collapse=", " )#
}
scterms
unique(scores)
scores =  unlist( lapply(ppl$people, function(e) e$scores) )#
scterms = matrix(ncol=2,nrow=length(unique(scores)))#
colnames(scterms) = c("scoregroup", "terms")#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    scterms[i/5+1,1] = i#
    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"#
    pfs2 = position(pfs)#
    print( paste( terms(pfs2), collapse=", " ))#
    scterms[i/5+1,2] =paste( terms(pfs2), collapse=", " )#
}
terms
scterms
scores =  unlist( lapply(ppl$people, function(e) e$scores) )#
scterms = matrix(ncol=2,nrow=length(unique(scores)))#
colnames(scterms) = c("scoregroup", "terms")#
rownames(scterms) = NULL#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    scterms[i/5+1,1] = i#
    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"#
    pfs2 = position(pfs)#
    print( paste( terms(pfs2), collapse=", " ))#
    scterms[i/5+1,2] =paste( terms(pfs2), collapse=", " )#
}#
scterms
scores =  unlist( lapply(ppl$people, function(e) e$scores) )#
scterms = matrix(ncol=2,nrow=length(unique(scores)))#
colnames(scterms) = c("scoregroup", "terms")#
rownames(scterms) = rep("", nrow(scterms))#
for (i in unique(scores)) {#
    gstuds = which(i == scores)#
    print(paste("score group", i, ":", sep=" "))#
    scterms[i/5+1,1] = i#
    pfs = unlist( lapply(ppl$people[gstuds], performances) )#
    class(pfs) = "Performance"#
    pfs2 = position(pfs)#
    print( paste( terms(pfs2), collapse=", " ))#
    scterms[i/5+1,2] =paste( terms(pfs2), collapse=", " )#
}#
scterms
nrow(scterms)
scterms[2]
scterms[,2]
as.matrix(scterms[,2])
t(scterms[,2])
as.matrix(scterms[,2])
table(scores)
q()
library(mpia)
#setwd("~/Documents/werkstatt/mpia-package/mpia-package/R")
setwd("~/Documents/werkstatt/mpia-package/mpia-package/R")
setwd("~/Documents/werkstatt/mpia-package/mpia-package/pkg/mpia/tests")
source("testbank/DomainManagerTests.R")#
#
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -#
# VISUALISER#
#
source("testbank/VisualiserTests.R") # will be a bit slower, since DomainManagerTests overwrote all geodata#
#
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -#
# PERFORMANCE#
#
source("testbank/PerformanceTests.R")#
#
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -#
# PERSON#
#
source("testbank/PersonTests.R")#
#
# -  -  -  -  -  -  -  -  -  -  -  -#
# INTROSPECTION#
#
source("testbank/introspectionTests.R")#
#
# -  -  -  -  -  -  -  -  -  -  -  -#
# PROXIMITY#
#
source("testbank/PersonGenerateTraces.R")#
source("testbank/ProximityTests.R")#
#
# -  -  -  -  -  -  -  -  -  -  -  -#
# HUMANRESOURCEMANAGER#
#
source("testbank/PersonGenerateTraces.R")#
source("testbank/HumanResourceManagerTests.R")#
#
# -  -  -  -  -  -  -  -  -  -  -  -#
# PLOTTING / GROUP / COMPETENCE ANALYSIS#
#
#source("../tests/personTracesExtendedLandauer.R")#
source("testbank/plotTests.R")
d = Domain(name="test")
evidence = VectorSource( c("abc abc def", "def def ghi", "ghi ijk, lmno", "pqrs tuv wxyz") )
d$corpus(evidence)
d$corpus
class(evidence)
any(class(evidence) == "Source")
mode(evidence)
x = evidence
tm = Corpus(x, readerControl = list(reader = readPlain(), #
            language = "en", load = TRUE, removePunctuation = TRUE, #
            stopwords = TRUE, minWordLength = 3, removeNumbers = TRUE))#
        tm = tm_map(tm, tolower)#
        tmorig = tm#
        tm = tm_map(tm, stemDocument, language = "en")#
        dict = Dictionary(TermDocumentMatrix(tmorig, control = list(removePunctuation = TRUE, #
            stopwords = FALSE, minWordLength = 1, removeNumbers = TRUE)))#
        dtm = TermDocumentMatrix(tm, control = list(removePunctuation = TRUE, #
            removeNumbers = TRUE, stopwords = TRUE, minWordLength = 3, #
            bounds = list(global = c(1, Inf))))#
        dtms = dtm#
        sc = as.character(stemCompletion(rownames(dtms), dictionary = dict, #
            type = "shortest"))#
        sc[which(is.na(sc))] = rownames(dtms)[which(is.na(sc))]#
        dtmsold = dtms#
        rownames(dtms) = sc#
        if (any(duplicated(rownames(dtms)))) {#
            dupes = which(duplicated(rownames(dtms)))#
            for (i in dupes) {#
                cat(paste("removing dupe for ", sc[i], "\n", #
                  sep = ""))#
                hits = which(sc == sc[i])#
                target = hits[which(!hits %in% which(duplicated(sc)))]#
                dtms[target, ] = colSums(as.matrix(dtms[hits[which(hits != #
                  target)], ]))#
            }#
            dtms = dtms[!duplicated(rownames(dtms)), ]#
        }#
        class(dtms) = c("TermDocumentMatrix", class(dtms))#
        class(dtms) = c("matrix", class(dtms))#
        if (any(rownames(dtms) == "")) {#
            cat("removing empty ones")#
            dtms = dtms[-(which(rownames(dtms) == "")), ]#
        }#
        .self$textmatrix = dtms#
        processed <<- FALSE
?Corpus
tm = Corpus(x, readerControl = list(reader = readPlain(), #
            language = "en", load = TRUE, removePunctuation = TRUE, #
            stopwords = TRUE, minWordLength = 3, removeNumbers = TRUE))
tm = Corpus(VectorSource(x), readerControl = list(reader = readPlain(), #
            language = "en", load = TRUE, removePunctuation = TRUE, #
            stopwords = TRUE, minWordLength = 3, removeNumbers = TRUE))
tm = Corpus(x, readPlain, readerControl=list( #
            language = "en", load = TRUE, removePunctuation = TRUE, #
            stopwords = TRUE, minWordLength = 3, removeNumbers = TRUE))
?Corpus
Corpus(#
        x,#
        readerControl=list(#
            reader=readPlain, language="de",#
            load=TRUE, removePunctuation=TRUE, stopwords=TRUE, minWordLength=3, removeNumbers=TRUE#
        )#
    )
x
tm = Corpus(x, readerControl=list(reader=readPlain, language="en", load=TRUE, removePunctuation=TRUE, stopwords=TRUE, minWordLength=3, removeNumbers=TRUE))#
      tm = tm_map(tm, tolower)#
      # save full dictionary for stem completion#
      dict = Terms(DocumentTermMatrix( tm, control=list(removePunctuation=TRUE, stopwords=TRUE, minWordLength=3, removeNumbers=TRUE)))#
      # stemming#
      tm = tm_map(tm, stemDocument, language="en")#
      dtm = TermDocumentMatrix(tm, control = list(#
         removePunctuation = TRUE, removeNumbers = TRUE, stopwords = TRUE,#
         minWordLength = 3, bounds = list(global=c(2,Inf))#
      ))#
#
      # stem completion#
      sc = as.character( stemCompletion(rownames(dtm), dictionary=dict, type="shortest") )#
      sc[which(is.na(sc))] = rownames(dtm)[which(is.na(sc))]#
      rownames(dtm) = sc#
      if (any(duplicated(rownames(dtm)))) {#
          dupes = which(duplicated(rownames(dtm)))#
          for (i in dupes) {#
              hits = which(sc == sc[i])#
              target = hits[ which(! hits %in% which(duplicated(sc))) ]#
              replvec = t(as.matrix( colSums(as.matrix(dtm[ hits, ])) ))#
              rownames(replvec) = sc[target]#
              dtm[ target,1:length(replvec) ] = replvec#
          }#
          dtm = dtm[!duplicated(rownames(dtm)),]#
      }#
      class(dtm) = "TermDocumentMatrix"#
      class(dtm) = "textmatrix"#
      if (any(rownames(dtm) == "")) {#
          cat("removing empty ones")#
          dtm = dtm[-(which(rownames(dtm) == "")), ]#
      }
dtm
class(dtm)
tm = Corpus(x, readerControl=list(reader=readPlain, language="en", load=TRUE, removePunctuation=TRUE, stopwords=TRUE, minWordLength=3, removeNumbers=TRUE))#
      tm = tm_map(tm, tolower)#
      # save full dictionary for stem completion#
      dict = Terms(DocumentTermMatrix( tm, control=list(removePunctuation=TRUE, stopwords=TRUE, minWordLength=3, removeNumbers=TRUE)))#
      # stemming#
      tm = tm_map(tm, stemDocument, language="en")#
      dtm = TermDocumentMatrix(tm, control = list(#
         removePunctuation = TRUE, removeNumbers = TRUE, stopwords = TRUE,#
         minWordLength = 3, bounds = list(global=c(2,Inf))#
      ))
class(dtm)
# stem completion#
      sc = as.character( stemCompletion(rownames(dtm), dictionary=dict, type="shortest") )#
      sc[which(is.na(sc))] = rownames(dtm)[which(is.na(sc))]#
      rownames(dtm) = sc#
      if (any(duplicated(rownames(dtm)))) {#
          dupes = which(duplicated(rownames(dtm)))#
          for (i in dupes) {#
              hits = which(sc == sc[i])#
              target = hits[ which(! hits %in% which(duplicated(sc))) ]#
              replvec = t(as.matrix( colSums(as.matrix(dtm[ hits, ])) ))#
              rownames(replvec) = sc[target]#
              dtm[ target,1:length(replvec) ] = replvec#
          }#
          dtm = dtm[!duplicated(rownames(dtm)),]#
      }#
      class(dtm) = "TermDocumentMatrix"#
      if (any(rownames(dtm) == "")) {#
          cat("removing empty ones")#
          dtm = dtm[-(which(rownames(dtm) == "")), ]#
      }
class(dtm)
dtm
sum(dtm*dtm)
class(dtm)
class(as.matrix(dtm))
class(as.matrix(dtm))
tm = Corpus(x, readerControl=list(reader=readPlain, language="en", load=TRUE, removePunctuation=TRUE, stopwords=TRUE, minWordLength=3, removeNumbers=TRUE))#
      tm = tm_map(tm, tolower)#
      # save full dictionary for stem completion#
      dict = Terms(DocumentTermMatrix( tm, control=list(removePunctuation=TRUE, stopwords=TRUE, minWordLength=3, removeNumbers=TRUE)))#
      # stemming#
      tm = tm_map(tm, stemDocument, language="en")#
      dtm = TermDocumentMatrix(tm, control = list(#
         removePunctuation = TRUE, removeNumbers = TRUE, stopwords = TRUE,#
         minWordLength = 3, bounds = list(global=c(2,Inf))#
      ))#
#
      # stem completion#
      sc = as.character( stemCompletion(rownames(dtm), dictionary=dict, type="shortest") )#
      sc[which(is.na(sc))] = rownames(dtm)[which(is.na(sc))]#
      rownames(dtm) = sc#
      if (any(duplicated(rownames(dtm)))) {#
          dupes = which(duplicated(rownames(dtm)))#
          for (i in dupes) {#
              hits = which(sc == sc[i])#
              target = hits[ which(! hits %in% which(duplicated(sc))) ]#
              replvec = t(as.matrix( colSums(as.matrix(dtm[ hits, ])) ))#
              rownames(replvec) = sc[target]#
              dtm[ target,1:length(replvec) ] = replvec#
          }#
          dtm = dtm[!duplicated(rownames(dtm)),]#
      }#
      if (any(rownames(dtm) == "")) {#
          cat("removing empty ones")#
          dtm = dtm[-(which(rownames(dtm) == "")), ]#
      }#
      dtm = as.matrix(dtm)#
      class(dtm) = "TermDocumentMatrix"
class(dtm)
sum(dtm*dtm)
as.matrix(dtm)
dtm
dtm
lsa(dtm)
library(mpia)
q()
